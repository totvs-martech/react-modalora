{"version":3,"sources":["../src/ModalProvider.test.js"],"names":["describe","it","expect","document","body","innerHTML","toMatchSnapshot","MockContent","openModalRef","openModal","style","overflow","not","toBe","closeModalRef","closeModal","MockContentWrapper","children","isOpen","MockModalContainer","MockModalComponent","mockGetModalRootElement","jest","fn","mockModalRoot","toHaveBeenCalledWith","mockOnOpen","toHaveBeenCalled","mockOnClose"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;AAKAA,EAAAA,QAAQ,CAAC,eAAD,EAAkB,YAAY;AACpCA,IAAAA,QAAQ,CAAC,aAAD,EAAgB,YAAY;AAClCC,MAAAA,EAAE,CAAC,uBAAD,EAA0B,YAAY;AACtC,yCACE,6BAAC,sBAAD,QACG,MACC,4EAFJ,CADF;AAUAC,QAAAA,MAAM,CAACC,QAAQ,CAACC,IAAT,CAAcC,SAAf,CAAN,CAAgCC,eAAhC;AACD,OAZC,CAAF;AAaD,KAdO,CAAR;AAgBAN,IAAAA,QAAQ,CAAC,mBAAD,EAAsB,YAAY;AACxCC,MAAAA,EAAE,CAAC,wBAAD,EAA2B,YAAY;AACvC,cAAMM,WAAW,GAAG,MAAM,sEAA1B;;AAEA,yCACE,6BAAC,sBAAD;AAAe,UAAA,OAAO,EAAEA;AAAxB,WACG,MACC,4EAFJ,CADF;AAUAL,QAAAA,MAAM,CAACC,QAAQ,CAACC,IAAT,CAAcC,SAAf,CAAN,CAAgCC,eAAhC;AACD,OAdC,CAAF;AAeD,KAhBO,CAAR;AAkBAN,IAAAA,QAAQ,CAAC,mBAAD,EAAsB,YAAY;AACxCC,MAAAA,EAAE,CAAC,yBAAD,EAA4B,YAAY;AACxC,cAAMM,WAAW,GAAG,MAAM,sEAA1B;;AACA,YAAIC,YAAJ;AAEA,yCACE,6BAAC,sBAAD,QACG,CAAC;AAAEC,UAAAA;AAAF,SAAD,KAAmB;AAClBD,UAAAA,YAAY,GAAGC,SAAf;AAEA,iBACE,4EADF;AAKD,SATH,CADF;AAcAP,QAAAA,MAAM,CAACC,QAAQ,CAACC,IAAT,CAAcC,SAAf,CAAN,CAAgCC,eAAhC,CAAgD,kBAAhD;AAEAE,QAAAA,YAAY,CAACD,WAAD,CAAZ;AACAL,QAAAA,MAAM,CAACC,QAAQ,CAACC,IAAT,CAAcC,SAAf,CAAN,CAAgCC,eAAhC,CAAgD,iBAAhD;AACD,OAtBC,CAAF;AAwBAL,MAAAA,EAAE,CAAC,uCAAD,EAA0C,MAAM;AAChD,cAAMM,WAAW,GAAG,MAAM,sEAA1B;;AACA,YAAIC,YAAJ;AAEA,yCACE,6BAAC,sBAAD,QACG,CAAC;AAAEC,UAAAA;AAAF,SAAD,KAAmB;AAClBD,UAAAA,YAAY,GAAGC,SAAf;AAEA,iBACE,4EADF;AAKD,SATH,CADF;AAcAP,QAAAA,MAAM,CAACC,QAAQ,CAACC,IAAT,CAAcM,KAAd,CAAoBC,QAArB,CAAN,CAAqCC,GAArC,CAAyCC,IAAzC,CAA8C,QAA9C;AAEAL,QAAAA,YAAY,CAACD,WAAD,CAAZ;AACAL,QAAAA,MAAM,CAACC,QAAQ,CAACC,IAAT,CAAcM,KAAd,CAAoBC,QAArB,CAAN,CAAqCE,IAArC,CAA0C,QAA1C;AACD,OAtBC,CAAF;AAuBD,KAhDO,CAAR;AAkDAb,IAAAA,QAAQ,CAAC,oBAAD,EAAuB,YAAY;AACzCC,MAAAA,EAAE,CAAC,yBAAD,EAA4B,YAAY;AACxC,cAAMM,WAAW,GAAG,MAAM,sEAA1B;;AACA,YAAIO,aAAJ;AAEA,yCACE,6BAAC,sBAAD;AAAe,UAAA,OAAO,EAAEP;AAAxB,WACG,CAAC;AAAEQ,UAAAA;AAAF,SAAD,KAAoB;AACnBD,UAAAA,aAAa,GAAGC,UAAhB;AAEA,iBACE,4EADF;AAKD,SATH,CADF;AAcAb,QAAAA,MAAM,CAACC,QAAQ,CAACC,IAAT,CAAcC,SAAf,CAAN,CAAgCC,eAAhC,CAAgD,mBAAhD;AAEAQ,QAAAA,aAAa;AACbZ,QAAAA,MAAM,CAACC,QAAQ,CAACC,IAAT,CAAcC,SAAf,CAAN,CAAgCC,eAAhC,CAAgD,kBAAhD;AACD,OAtBC,CAAF;AAwBAL,MAAAA,EAAE,CAAC,yCAAD,EAA4C,YAAY;AACxD,cAAMM,WAAW,GAAG,MAAM,sEAA1B;;AACA,YAAIO,aAAJ;AAEA,yCACE,6BAAC,sBAAD;AAAe,UAAA,OAAO,EAAEP;AAAxB,WACG,CAAC;AAAEQ,UAAAA;AAAF,SAAD,KAAoB;AACnBD,UAAAA,aAAa,GAAGC,UAAhB;AAEA,iBACE,4EADF;AAKD,SATH,CADF;AAcAb,QAAAA,MAAM,CAACC,QAAQ,CAACC,IAAT,CAAcM,KAAd,CAAoBC,QAArB,CAAN,CAAqCE,IAArC,CAA0C,QAA1C;AAEAC,QAAAA,aAAa;AACbZ,QAAAA,MAAM,CAACC,QAAQ,CAACC,IAAT,CAAcM,KAAd,CAAoBC,QAArB,CAAN,CAAqCC,GAArC,CAAyCC,IAAzC,CAA8C,QAA9C;AACD,OAtBC,CAAF;AAuBD,KAhDO,CAAR;AAkDAb,IAAAA,QAAQ,CAAC,gBAAD,EAAmB,YAAY;AACrCA,MAAAA,QAAQ,CAAC,gBAAD,EAAmB,YAAY;AACrCC,QAAAA,EAAE,CAAC,wBAAD,EAA2B,MAAM;AACjC,gBAAMe,kBAAkB,GAAG,CAAC;AAAEC,YAAAA,QAAF;AAAYC,YAAAA;AAAZ,WAAD,KAA0B;AAAK,2BAAaA;AAAlB,aAA2BD,QAA3B,CAArD;;AACA,gBAAMV,WAAW,GAAG,MAAM,sEAA1B;;AACA,cAAIC,YAAJ;AAEA,2CACE,6BAAC,sBAAD;AAAe,YAAA,cAAc,EAAEQ;AAA/B,aACG,CAAC;AAAEP,YAAAA;AAAF,WAAD,KAAmB;AAClBD,YAAAA,YAAY,GAAGC,SAAf;AAEA,mBACE,4EADF;AAKD,WATH,CADF;AAcAP,UAAAA,MAAM,CAACC,QAAQ,CAACC,IAAT,CAAcC,SAAf,CAAN,CAAgCC,eAAhC,CAAgD,mBAAhD;AAEAE,UAAAA,YAAY,CAACD,WAAD,CAAZ;AACAL,UAAAA,MAAM,CAACC,QAAQ,CAACC,IAAT,CAAcC,SAAf,CAAN,CAAgCC,eAAhC,CAAgD,kBAAhD;AACD,SAvBC,CAAF;AAwBD,OAzBO,CAAR;AA2BAN,MAAAA,QAAQ,CAAC,gBAAD,EAAmB,YAAY;AACrCC,QAAAA,EAAE,CAAC,uBAAD,EAA0B,YAAY;AACtC,gBAAMkB,kBAAkB,GAAG,CAAC;AAAEF,YAAAA;AAAF,WAAD,KAAkB;AAAK,2BAAY;AAAjB,aAAoCA,QAApC,CAA7C;;AACA,gBAAMV,WAAW,GAAG,MAAM,sEAA1B;;AAEA,2CACE,6BAAC,sBAAD;AAAe,YAAA,cAAc,EAAEY,kBAA/B;AAAmD,YAAA,OAAO,EAAEZ;AAA5D,aACG,CAAC;AAAEE,YAAAA;AAAF,WAAD,KACC,4EAFJ,CADF;AAUAP,UAAAA,MAAM,CAACC,QAAQ,CAACC,IAAT,CAAcC,SAAf,CAAN,CAAgCC,eAAhC;AACD,SAfC,CAAF;AAgBD,OAjBO,CAAR;AAmBAN,MAAAA,QAAQ,CAAC,gBAAD,EAAmB,YAAY;AACrCC,QAAAA,EAAE,CAAC,uBAAD,EAA0B,YAAY;AACtC,gBAAMmB,kBAAkB,GAAG,CAAC;AAAEH,YAAAA;AAAF,WAAD,KAAkB;AAAK,2BAAY;AAAjB,aAAoCA,QAApC,CAA7C;;AACA,gBAAMV,WAAW,GAAG,MAAM,sEAA1B;;AAEA,2CACE,6BAAC,sBAAD;AAAe,YAAA,cAAc,EAAEa,kBAA/B;AAAmD,YAAA,OAAO,EAAEb;AAA5D,aACG,CAAC;AAAEE,YAAAA;AAAF,WAAD,KACC,4EAFJ,CADF;AAUAP,UAAAA,MAAM,CAACC,QAAQ,CAACC,IAAT,CAAcC,SAAf,CAAN,CAAgCC,eAAhC;AACD,SAfC,CAAF;AAgBD,OAjBO,CAAR;AAmBAN,MAAAA,QAAQ,CAAC,WAAD,EAAc,YAAY;AAChCC,QAAAA,EAAE,CAAC,8CAAD,EAAiD,MAAM;AACvD,gBAAMoB,uBAAuB,GAAGC,IAAI,CAACC,EAAL,CAAQ,MAAMpB,QAAQ,CAACC,IAAvB,CAAhC;AACA,gBAAMoB,aAAa,GAAG,YAAtB;AAEA,2CACE,6BAAC,sBAAD;AAAe,YAAA,mBAAmB,EAAEH,uBAApC;AAA6D,YAAA,SAAS,EAAEG;AAAxE,aACG,CAAC;AAAEf,YAAAA;AAAF,WAAD,KACC,4EAFJ,CADF;AAUAP,UAAAA,MAAM,CAACmB,uBAAD,CAAN,CAAgCI,oBAAhC,CAAqDD,aAArD;AACD,SAfC,CAAF;AAgBD,OAjBO,CAAR;AAmBAxB,MAAAA,QAAQ,CAAC,QAAD,EAAW,MAAM;AACvBC,QAAAA,EAAE,CAAC,kCAAD,EAAqC,MAAM;AAC3C,gBAAMyB,UAAU,GAAGJ,IAAI,CAACC,EAAL,EAAnB;;AACA,gBAAMhB,WAAW,GAAG,MAAM,sEAA1B;;AAEA,2CACE,6BAAC,sBAAD;AAAe,YAAA,MAAM,EAAEmB,UAAvB;AAAmC,YAAA,OAAO,EAAEnB;AAA5C,aACG,MACC,4EAFJ,CADF;AAUAL,UAAAA,MAAM,CAACwB,UAAD,CAAN,CAAmBC,gBAAnB;AACD,SAfC,CAAF;AAiBA1B,QAAAA,EAAE,CAAC,uCAAD,EAA0C,MAAM;AAChD,gBAAMyB,UAAU,GAAGJ,IAAI,CAACC,EAAL,EAAnB;;AACA,gBAAMhB,WAAW,GAAG,MAAM,sEAA1B;;AACA,cAAIC,YAAJ;AAEA,2CACE,6BAAC,sBAAD;AAAe,YAAA,MAAM,EAAEkB;AAAvB,aACG,CAAC;AAAEjB,YAAAA;AAAF,WAAD,KAAmB;AAClBD,YAAAA,YAAY,GAAGC,SAAf;AAEA,mBACE,4EADF;AAKD,WATH,CADF;AAcAP,UAAAA,MAAM,CAACwB,UAAD,CAAN,CAAmBd,GAAnB,CAAuBe,gBAAvB;AACAnB,UAAAA,YAAY,CAACD,WAAD,CAAZ;AACAL,UAAAA,MAAM,CAACwB,UAAD,CAAN,CAAmBC,gBAAnB;AACD,SAtBC,CAAF;AAuBD,OAzCO,CAAR;AA2CA3B,MAAAA,QAAQ,CAAC,SAAD,EAAY,MAAM;AACxBC,QAAAA,EAAE,CAAC,kBAAD,EAAqB,MAAM;AAC3B,gBAAM2B,WAAW,GAAGN,IAAI,CAACC,EAAL,EAApB;;AACA,gBAAMhB,WAAW,GAAG,MAAM,sEAA1B;;AACA,cAAIO,aAAJ;AAEA,2CACE,6BAAC,sBAAD;AAAe,YAAA,OAAO,EAAEc,WAAxB;AAAqC,YAAA,OAAO,EAAErB;AAA9C,aACG,CAAC;AAAEQ,YAAAA;AAAF,WAAD,KAAoB;AACnBD,YAAAA,aAAa,GAAGC,UAAhB;AAEA,mBACE,4EADF;AAKD,WATH,CADF;AAcAb,UAAAA,MAAM,CAAC0B,WAAD,CAAN,CAAoBhB,GAApB,CAAwBe,gBAAxB;AACAb,UAAAA,aAAa;AACbZ,UAAAA,MAAM,CAAC0B,WAAD,CAAN,CAAoBD,gBAApB;AACD,SAtBC,CAAF;AAuBD,OAxBO,CAAR;AAyBD,KAzJO,CAAR;AA0JD,GAjSO,CAAR","sourcesContent":["/* eslint-disable react/prop-types */\nimport React from 'react'\nimport { render } from 'react-testing-library'\nimport ModalProvider from './ModalProvider'\n\ndescribe('ModalProvider', function () {\n  describe('basic usage', function () {\n    it('should match snapshot', function () {\n      render(\n        <ModalProvider>\n          {() => (\n            <>\n              Modal content\n            </>\n          )}\n        </ModalProvider>\n      )\n\n      expect(document.body.innerHTML).toMatchSnapshot()\n    })\n  })\n\n  describe('providing content', function () {\n    it('should render snapshot', function () {\n      const MockContent = () => <>content</>\n\n      render(\n        <ModalProvider content={MockContent}>\n          {() => (\n            <>\n              Modal content\n            </>\n          )}\n        </ModalProvider>\n      )\n\n      expect(document.body.innerHTML).toMatchSnapshot()\n    })\n  })\n\n  describe('calling openModal', function () {\n    it('should render snapshots', function () {\n      const MockContent = () => <>content</>\n      let openModalRef\n\n      render(\n        <ModalProvider>\n          {({ openModal }) => {\n            openModalRef = openModal\n\n            return (\n              <>\n                Modal content\n              </>\n            )\n          }}\n        </ModalProvider>\n      )\n\n      expect(document.body.innerHTML).toMatchSnapshot('before openModal')\n\n      openModalRef(MockContent)\n      expect(document.body.innerHTML).toMatchSnapshot('after openModal')\n    })\n\n    it('should set body.style.overflow=hidden', () => {\n      const MockContent = () => <>content</>\n      let openModalRef\n\n      render(\n        <ModalProvider>\n          {({ openModal }) => {\n            openModalRef = openModal\n\n            return (\n              <>\n                Modal content\n              </>\n            )\n          }}\n        </ModalProvider>\n      )\n\n      expect(document.body.style.overflow).not.toBe('hidden')\n\n      openModalRef(MockContent)\n      expect(document.body.style.overflow).toBe('hidden')\n    })\n  })\n\n  describe('calling closeModal', function () {\n    it('should render snapshots', function () {\n      const MockContent = () => <>content</>\n      let closeModalRef\n\n      render(\n        <ModalProvider content={MockContent}>\n          {({ closeModal }) => {\n            closeModalRef = closeModal\n\n            return (\n              <>\n                Modal content\n              </>\n            )\n          }}\n        </ModalProvider>\n      )\n\n      expect(document.body.innerHTML).toMatchSnapshot('before closeModal')\n\n      closeModalRef()\n      expect(document.body.innerHTML).toMatchSnapshot('after closeModal')\n    })\n\n    it('should unset body.style.overflow=hidden', function () {\n      const MockContent = () => <>content</>\n      let closeModalRef\n\n      render(\n        <ModalProvider content={MockContent}>\n          {({ closeModal }) => {\n            closeModalRef = closeModal\n\n            return (\n              <>\n                Modal content\n              </>\n            )\n          }}\n        </ModalProvider>\n      )\n\n      expect(document.body.style.overflow).toBe('hidden')\n\n      closeModalRef()\n      expect(document.body.style.overflow).not.toBe('hidden')\n    })\n  })\n\n  describe('passing custom', function () {\n    describe('ContentWrapper', function () {\n      it('should match snapshots', () => {\n        const MockContentWrapper = ({ children, isOpen }) => <div data-isopen={isOpen}>{children}</div>\n        const MockContent = () => <>content</>\n        let openModalRef\n\n        render(\n          <ModalProvider ContentWrapper={MockContentWrapper}>\n            {({ openModal }) => {\n              openModalRef = openModal\n\n              return (\n                <>\n                  Modal content\n                </>\n              )\n            }}\n          </ModalProvider>\n        )\n\n        expect(document.body.innerHTML).toMatchSnapshot('with isOpen=false')\n\n        openModalRef(MockContent)\n        expect(document.body.innerHTML).toMatchSnapshot('with isOpen=true')\n      })\n    })\n\n    describe('ModalContainer', function () {\n      it('should match snapshot', function () {\n        const MockModalContainer = ({ children }) => <div data-testid='modal-container'>{children}</div>\n        const MockContent = () => <>content</>\n\n        render(\n          <ModalProvider ModalContainer={MockModalContainer} content={MockContent}>\n            {({ openModal }) => (\n              <>\n                Modal content\n              </>\n            )}\n          </ModalProvider>\n        )\n\n        expect(document.body.innerHTML).toMatchSnapshot()\n      })\n    })\n\n    describe('ModalComponent', function () {\n      it('should match snapshot', function () {\n        const MockModalComponent = ({ children }) => <div data-testid='modal-component'>{children}</div>\n        const MockContent = () => <>content</>\n\n        render(\n          <ModalProvider ModalComponent={MockModalComponent} content={MockContent}>\n            {({ openModal }) => (\n              <>\n                Modal content\n              </>\n            )}\n          </ModalProvider>\n        )\n\n        expect(document.body.innerHTML).toMatchSnapshot()\n      })\n    })\n\n    describe('modalRoot', function () {\n      it('should pass modalRoot to getModalRootElement', () => {\n        const mockGetModalRootElement = jest.fn(() => document.body)\n        const mockModalRoot = 'modal-root'\n\n        render(\n          <ModalProvider getModalRootElement={mockGetModalRootElement} modalRoot={mockModalRoot}>\n            {({ openModal }) => (\n              <>\n                Modal content\n              </>\n            )}\n          </ModalProvider>\n        )\n\n        expect(mockGetModalRootElement).toHaveBeenCalledWith(mockModalRoot)\n      })\n    })\n\n    describe('onOpen', () => {\n      it('should be called passing content', () => {\n        const mockOnOpen = jest.fn()\n        const MockContent = () => <>content</>\n\n        render(\n          <ModalProvider onOpen={mockOnOpen} content={MockContent}>\n            {() => (\n              <>\n                Modal content\n              </>\n            )}\n          </ModalProvider>\n        )\n\n        expect(mockOnOpen).toHaveBeenCalled()\n      })\n\n      it('should be called on calling openModal', () => {\n        const mockOnOpen = jest.fn()\n        const MockContent = () => <>content</>\n        let openModalRef\n\n        render(\n          <ModalProvider onOpen={mockOnOpen}>\n            {({ openModal }) => {\n              openModalRef = openModal\n\n              return (\n                <>\n                  Modal content\n                </>\n              )\n            }}\n          </ModalProvider>\n        )\n\n        expect(mockOnOpen).not.toHaveBeenCalled()\n        openModalRef(MockContent)\n        expect(mockOnOpen).toHaveBeenCalled()\n      })\n    })\n\n    describe('onClose', () => {\n      it('should be called', () => {\n        const mockOnClose = jest.fn()\n        const MockContent = () => <>content</>\n        let closeModalRef\n\n        render(\n          <ModalProvider onClose={mockOnClose} content={MockContent}>\n            {({ closeModal }) => {\n              closeModalRef = closeModal\n\n              return (\n                <>\n                  Modal content\n                </>\n              )\n            }}\n          </ModalProvider>\n        )\n\n        expect(mockOnClose).not.toHaveBeenCalled()\n        closeModalRef()\n        expect(mockOnClose).toHaveBeenCalled()\n      })\n    })\n  })\n})\n"],"file":"ModalProvider.test.js"}