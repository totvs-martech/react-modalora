{"version":3,"sources":["../src/getModalRootElement.test.js"],"names":["describe","it","expect","toBe","document","body","mockElement","beforeEach","createElement","mockElementId","id","appendChild","toEqual"],"mappings":";;;;;;;;;;;;;;;;;;;AAEAA,EAAAA,QAAQ,CAAC,qBAAD,EAAwB,YAAY;AAC1CC,IAAAA,EAAE,CAAC,+BAAD,EAAkC,YAAY;AAC9CC,MAAAA,MAAM,CAAC,mCAAD,CAAN,CAA8BC,IAA9B,CAAmCC,QAAQ,CAACC,IAA5C;AACD,KAFC,CAAF;AAIAL,IAAAA,QAAQ,CAAC,eAAD,EAAkB,YAAY;AACpC,UAAIM,WAAJ;AAEAC,MAAAA,UAAU,CAAC,YAAY;AACrBD,QAAAA,WAAW,GAAGF,QAAQ,CAACI,aAAT,CAAuB,KAAvB,CAAd;AACD,OAFS,CAAV;AAIAR,MAAAA,QAAQ,CAAC,gBAAD,EAAmB,YAAY;AACrCC,QAAAA,EAAE,CAAC,4BAAD,EAA+B,YAAY;AAC3CC,UAAAA,MAAM,CAAC,kCAAoBI,WAApB,CAAD,CAAN,CAAyCH,IAAzC,CAA8CG,WAA9C;AACD,SAFC,CAAF;AAGD,OAJO,CAAR;AAMAN,MAAAA,QAAQ,CAAC,WAAD,EAAc,YAAY;AAChCC,QAAAA,EAAE,CAAC,oBAAD,EAAuB,YAAY;AACnC,gBAAMQ,aAAa,GAAG,cAAtB;AACAH,UAAAA,WAAW,CAACI,EAAZ,GAAiBD,aAAjB;AACAL,UAAAA,QAAQ,CAACC,IAAT,CAAcM,WAAd,CAA0BL,WAA1B;AAEAJ,UAAAA,MAAM,CAAC,kCAAoBO,aAApB,CAAD,CAAN,CAA2CN,IAA3C,CAAgDG,WAAhD;AACD,SANC,CAAF;AAQAL,QAAAA,EAAE,CAAC,qCAAD,EAAwC,YAAY;AACpD,gBAAMQ,aAAa,GAAG,cAAtB;AACAH,UAAAA,WAAW,CAACI,EAAZ,GAAiBD,aAAjB;AACAL,UAAAA,QAAQ,CAACC,IAAT,CAAcM,WAAd,CAA0BL,WAA1B;AAEAJ,UAAAA,MAAM,CAAC,kCAAqB,IAAGO,aAAc,EAAtC,CAAD,CAAN,CAAiDG,OAAjD,CAAyDN,WAAzD;AACD,SANC,CAAF;AAOD,OAhBO,CAAR;AAkBAN,MAAAA,QAAQ,CAAC,iBAAD,EAAoB,MAAM;AAChCC,QAAAA,EAAE,CAAC,oBAAD,EAAuB,MAAM;AAC7BC,UAAAA,MAAM,CAAC,kCAAoB,KAApB,CAAD,CAAN,CAAmCC,IAAnC,CAAwCC,QAAQ,CAACC,IAAjD;AACD,SAFC,CAAF;AAGD,OAJO,CAAR;AAKD,KApCO,CAAR;AAqCD,GA1CO,CAAR","sourcesContent":["import getModalRootElement from './getModalRootElement'\n\ndescribe('getModalRootElement', function () {\n  it('should return body by default', function () {\n    expect(getModalRootElement()).toBe(document.body)\n  })\n\n  describe('passing input', function () {\n    let mockElement\n\n    beforeEach(function () {\n      mockElement = document.createElement('div')\n    })\n\n    describe('as HTMLElement', function () {\n      it('should return passed input', function () {\n        expect(getModalRootElement(mockElement)).toBe(mockElement)\n      })\n    })\n\n    describe('as string', function () {\n      it('should look for id', function () {\n        const mockElementId = 'mock-element'\n        mockElement.id = mockElementId\n        document.body.appendChild(mockElement)\n\n        expect(getModalRootElement(mockElementId)).toBe(mockElement)\n      })\n\n      it('should look for using querySelector', function () {\n        const mockElementId = 'mock-element'\n        mockElement.id = mockElementId\n        document.body.appendChild(mockElement)\n\n        expect(getModalRootElement(`#${mockElementId}`)).toEqual(mockElement)\n      })\n    })\n\n    describe('that not exists', () => {\n      it('should return body', () => {\n        expect(getModalRootElement('foo')).toBe(document.body)\n      })\n    })\n  })\n})\n"],"file":"getModalRootElement.test.js"}